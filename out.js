var rules = {
top: $ => repeat(choice(
$.exportDecl,
$.importDecl,
$.packageStmt,
$.r_package,
)),
identifier: $ => choice(
$.Identifier,
'no_reset',
seq(
$.identifier,
'::',
$.identifier,
),
seq(
$.identifier,
'.',
$.identifier,
),
seq(
$.identifier,
seq(
'[',
optional($.expression),
']',
),
),
seq(
$.identifier,
'[]',
),
),
identifier_type: $ => choice(
$.Identifier,
'Action',
'ActionValue',
'Rules',
'void',
'module',
'rule',
),
stringLiteral: $ => $.StringLiteral,
r_package: $ => seq(
'package',
$.packageIde,
';',
repeat(choice(
$.exportDecl,
$.importDecl,
$.packageStmt,
)),
'endpackage',
optional(seq(
':',
$.packageIde,
)),
),
non_package: $ => choice(
repeat($.exportDecl),
repeat($.importDecl),
repeat($.packageStmt),
),
exportDecl: $ => seq(
'export',
$.exportItem,
repeat(seq(
',',
$.exportItem,
)),
';',
),
exportItem: $ => choice(
seq(
$.identifier,
optional('(..)'),
),
seq(
$.identifier_type,
optional('(..)'),
),
seq(
$.packageIde,
'::',
'*',
),
),
importDecl: $ => seq(
'import',
$.importItem,
repeat(seq(
',',
$.importItem,
)),
';',
),
importItem: $ => seq(
$.packageIde,
'::',
'*',
),
packageStmt: $ => choice(
$.moduleDef,
$.interfaceDecl,
$.typeDef,
$.varDecl,
$.varAssign,
$.functionDef,
$.typeclassDef,
$.typeclassInstanceDef,
$.externModuleImport,
$.externCImport,
),
packageIde: $ => $.identifier_type,
type: $ => choice(
$.typePrimary,
seq(
$.typePrimary,
'(',
$.type,
optional($.identifier),
repeat(seq(
',',
$.type,
optional($.identifier),
)),
')',
),
'let',
),
typePrimary: $ => choice(
seq(
$.typeIde,
optional(seq(
'#',
'(',
$.type,
repeat(seq(
',',
$.type,
)),
')',
)),
),
$.typeNat,
seq(
'bit',
'[',
$.typeNat,
':',
$.typeNat,
']',
),
seq(
'function',
$.typePrimary,
optional($.identifier),
),
seq(
'(',
$.type,
')',
),
),
typeIde: $ => $.identifier_type,
typeNat: $ => $.IntLiteral,
interfaceDecl: $ => seq(
optional($.attributeInstances),
'interface',
$.typeDefType,
';',
repeat($.interfaceMemberDecl),
'endinterface',
optional(seq(
':',
$.typeIde,
)),
),
typeDefType: $ => choice(
seq(
$.typeIde,
optional($.typeFormals),
),
seq(
'function',
$.typeIde,
$.identifier,
'(',
optional($.functionFormals),
')',
),
),
typeFormals: $ => seq(
'#',
'(',
$.typeFormal,
repeat(seq(
',',
$.typeFormal,
)),
')',
),
typeFormal: $ => choice(
seq(
optional('numeric'),
optional('type'),
choice(
$.typeIde,
$.typeDefType,
),
),
$.IntLiteral,
),
interfaceMemberDecl: $ => choice(
$.methodProto,
$.subinterfaceDecl,
),
methodProto: $ => seq(
optional($.attributeInstances),
'method',
$.type,
$.identifier,
optional(seq(
'(',
optional($.methodProtoFormals),
')',
)),
';',
),
methodProtoFormals: $ => seq(
$.methodProtoFormal,
repeat(seq(
',',
$.methodProtoFormal,
)),
),
methodProtoFormal: $ => seq(
optional($.attributeInstances),
$.type,
$.identifier,
),
subinterfaceDecl: $ => seq(
optional($.attributeInstances),
'interface',
$.typeDefType,
$.identifier,
';',
),
moduleDef: $ => seq(
optional($.attributeInstances),
$.moduleProto,
repeat($.moduleStmt),
'endmodule',
optional(seq(
':',
$.identifier,
)),
),
moduleProto: $ => seq(
'module',
optional(seq(
'[',
$.type,
']',
)),
$.identifier,
optional($.moduleFormalParams),
'(',
optional($.moduleFormalArgs),
')',
optional($.provisos),
';',
),
moduleFormalParams: $ => seq(
'#',
'(',
$.moduleFormalParam,
repeat(seq(
',',
$.moduleFormalParam,
)),
')',
),
moduleFormalParam: $ => seq(
optional($.attributeInstances),
optional('parameter'),
choice(
seq(
$.type,
$.identifier,
),
seq(
'function',
$.type,
$.identifier,
'(',
optional(seq(
$.type,
$.identifier,
repeat(seq(
',',
$.type,
$.identifier,
)),
)),
')',
),
),
),
moduleFormalArgs: $ => choice(
seq(
optional($.attributeInstances),
$.type,
),
seq(
optional($.attributeInstances),
choice(
seq(
$.type,
$.identifier,
optional('[]'),
),
seq(
'function',
$.type,
$.identifier,
'(',
optional(seq(
$.type,
$.identifier,
repeat(seq(
',',
$.type,
$.identifier,
)),
)),
')',
),
),
repeat(seq(
',',
optional($.attributeInstances),
choice(
seq(
$.type,
$.identifier,
optional('[]'),
),
seq(
'function',
$.type,
$.identifier,
'(',
optional(seq(
$.type,
$.identifier,
repeat(seq(
',',
$.type,
$.identifier,
)),
)),
')',
),
),
)),
),
),
moduleStmt: $ => choice(
$.moduleInst,
$.methodDef,
$.subinterfaceDef,
$.r_rule,
choice(
$.varDo,
$.varDeclDo,
),
seq(
$.functionCall,
';',
),
$.systemTaskStmt,
seq(
optional($.expression),
';',
),
$.returnStmt,
$.varDecl,
$.varAssign,
$.functionDef,
$.moduleDef,
$.beginEndStmt_moduleStmt,
$.if_moduleStmt,
$.case_moduleStmt,
$.for_moduleStmt,
$.while_moduleStmt,
),
moduleInst: $ => choice(
seq(
optional($.attributeInstances),
$.type,
$.identifier,
'<-',
$.moduleApp,
';',
),
seq(
optional($.attributeInstances),
$.type,
$.identifier,
'(',
')',
';',
$.moduleApp2,
$.identifier,
'(',
optional($.moduleActualArgs),
')',
';',
),
),
moduleApp: $ => seq(
$.identifier,
'(',
optional(seq(
$.moduleActualParamArg,
repeat(seq(
',',
$.moduleActualParamArg,
)),
)),
')',
),
moduleActualParamArg: $ => choice(
$.expression,
seq(
'clocked_by',
$.expression,
),
seq(
'reset_by',
$.expression,
),
),
moduleApp2: $ => seq(
$.identifier,
optional(seq(
'#',
'(',
$.moduleActualParam,
repeat(seq(
',',
$.moduleActualParam,
)),
')',
)),
),
moduleActualParam: $ => $.expression,
moduleActualArgs: $ => seq(
$.moduleActualArg,
repeat(seq(
',',
$.moduleActualArg,
)),
),
moduleActualArg: $ => choice(
$.expression,
seq(
'clocked_by',
$.expression,
),
seq(
'reset_by',
$.expression,
),
),
methodDef: $ => choice(
seq(
'method',
optional($.type),
$.identifier,
optional(seq(
'(',
optional($.methodFormals),
')',
)),
optional($.implicitCond),
';',
$.functionBody,
'endmethod',
optional(seq(
':',
$.identifier,
)),
),
seq(
'method',
'Action',
$.identifier,
optional(seq(
'(',
optional($.methodFormals),
')',
)),
optional($.implicitCond),
';',
repeat($.actionStmt),
'endmethod',
optional(seq(
':',
$.identifier,
)),
),
seq(
'method',
'ActionValue',
'#',
'(',
$.type,
')',
optional($.identifier),
optional(seq(
'(',
optional($.methodFormals),
')',
)),
optional($.implicitCond),
';',
repeat($.actionValueStmt),
'endmethod',
optional(seq(
':',
$.identifier,
)),
),
seq(
'method',
optional($.type),
$.identifier,
optional(seq(
'(',
optional($.methodFormals),
')',
)),
optional($.implicitCond),
'=',
$.expression,
';',
),
),
implicitCond: $ => seq(
'if',
'(',
$.condPredicate,
')',
),
methodFormals: $ => seq(
$.methodFormal,
repeat(seq(
',',
$.methodFormal,
)),
),
methodFormal: $ => seq(
optional($.type),
$.identifier,
),
subinterfaceDef: $ => choice(
seq(
'interface',
$.identifier_type,
$.identifier,
';',
repeat($.interfaceStmt),
'endinterface',
optional(seq(
':',
$.identifier,
)),
),
seq(
'interface',
optional($.type),
$.identifier,
'=',
$.expression,
';',
),
),
interfaceStmt: $ => choice(
$.methodDef,
$.subinterfaceDef,
$.expressionStmt,
),
expressionStmt: $ => choice(
$.varDecl,
$.varAssign,
$.functionDef,
$.moduleDef,
$.beginEndStmt_expressionStmt,
$.if_expressionStmt,
$.case_expressionStmt,
$.for_expressionStmt,
$.while_expressionStmt,
),
r_rule: $ => seq(
optional($.attributeInstances),
'rule',
$.identifier,
optional($.ruleCond),
';',
$.ruleBody,
'endrule',
optional(seq(
':',
$.identifier,
)),
),
ruleCond: $ => seq(
optional('if'),
'(',
$.condPredicate,
')',
),
ruleBody: $ => repeat($.actionStmt),
typeDef: $ => choice(
$.typedefSynonym,
$.typedefEnum,
$.typedefStruct,
$.typedefTaggedUnion,
),
typedefSynonym: $ => seq(
'typedef',
$.type,
$.typeDefType,
';',
),
typedefEnum: $ => seq(
'typedef',
'enum',
'{',
$.typedefEnumElements,
'}',
$.identifier_type,
optional($.derives),
';',
),
typedefEnumElements: $ => seq(
$.typedefEnumElement,
repeat(seq(
',',
$.typedefEnumElement,
)),
),
typedefEnumElement: $ => choice(
seq(
$.identifier_type,
optional(seq(
'=',
$.IntLiteral,
)),
),
seq(
$.identifier_type,
'[',
$.IntLiteral,
']',
optional(seq(
'=',
$.IntLiteral,
)),
),
seq(
$.identifier_type,
'[',
$.IntLiteral,
':',
$.IntLiteral,
']',
optional(seq(
'=',
$.IntLiteral,
)),
),
),
typedefStruct: $ => seq(
'typedef',
'struct',
'{',
repeat($.structMember),
'}',
$.typeDefType,
optional($.derives),
';',
),
typedefTaggedUnion: $ => seq(
'typedef',
'union',
'tagged',
'{',
repeat($.unionMember),
'}',
$.typeDefType,
optional($.derives),
';',
),
structMember: $ => choice(
seq(
$.type,
$.identifier,
';',
),
seq(
$.subUnion,
$.identifier,
';',
),
),
unionMember: $ => choice(
seq(
$.type,
$.identifier_type,
';',
),
seq(
$.subStruct,
$.identifier_type,
';',
),
seq(
$.subUnion,
$.identifier_type,
';',
),
seq(
'void',
$.identifier_type,
';',
),
),
subStruct: $ => seq(
'struct',
'{',
repeat($.structMember),
'}',
),
subUnion: $ => seq(
'union',
'tagged',
'{',
repeat($.unionMember),
'}',
),
varDecl: $ => choice(
seq(
optional($.attributeInstances),
$.type,
$.varInit,
repeat(seq(
',',
$.varInit,
)),
';',
),
seq(
optional($.attributeInstances),
'let',
$.lValue,
'=',
$.expression,
';',
),
),
varInit: $ => seq(
optional($.attributeInstances),
$.identifier,
optional($.arrayDims),
optional(seq(
'=',
$.expression,
)),
),
arrayDims: $ => seq(
'[',
$.expression,
']',
repeat(seq(
'[',
$.expression,
']',
)),
),
varAssign: $ => choice(
seq(
optional($.attributeInstances),
$.lValue,
'=',
$.expression,
';',
),
seq(
optional($.attributeInstances),
optional('let'),
$.lValue,
'<-',
$.expression,
';',
),
seq(
optional($.attributeInstances),
'match',
$.pattern,
'=',
$.expression,
';',
),
seq(
optional($.attributeInstances),
'match',
$.pattern,
'<-',
$.expression,
';',
),
),
lValue: $ => choice(
$.identifier,
seq(
'{',
$.identifier,
repeat(seq(
',',
$.identifier,
)),
'}',
),
seq(
$.lValue,
'.',
$.identifier,
),
seq(
$.lValue,
'[',
$.expression,
']',
),
seq(
$.lValue,
'[',
$.expression,
':',
$.expression,
']',
),
),
regWrite: $ => choice(
seq(
$.lValue,
'<=',
$.expression,
';',
),
seq(
'(',
$.expression,
')',
'<=',
$.expression,
';',
),
seq(
$.lValue,
$.arrayIndexes,
'<=',
$.expression,
';',
),
seq(
$.lValue,
'[',
$.expression,
':',
$.expression,
']',
'<=',
$.expression,
';',
),
seq(
$.lValue,
'.',
$.identifier,
'<=',
$.expression,
';',
),
),
arrayIndexes: $ => seq(
'[',
$.expression,
']',
repeat(seq(
'[',
$.expression,
']',
)),
),
beginEndStmt_functionBodyStmt: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.functionBodyStmt),
'end',
optional(seq(
':',
$.identifier,
)),
),
beginEndStmt_actionStmt: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.actionStmt),
'end',
optional(seq(
':',
$.identifier,
)),
),
beginEndStmt_actionValueStmt: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.actionValueStmt),
'end',
optional(seq(
':',
$.identifier,
)),
),
beginEndStmt_moduleStmt: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.moduleStmt),
'end',
optional(seq(
':',
$.identifier,
)),
),
beginEndStmt_expressionStmt: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.expressionStmt),
'end',
optional(seq(
':',
$.identifier,
)),
),
if_functionBodyStmt: $ => seq(
'if',
'(',
$.condPredicate,
')',
$.functionBodyStmt,
optional(seq(
'else',
$.functionBodyStmt,
)),
),
if_actionStmt: $ => seq(
'if',
'(',
$.condPredicate,
')',
$.actionStmt,
optional(seq(
'else',
$.actionStmt,
)),
),
if_actionValueStmt: $ => seq(
'if',
'(',
$.condPredicate,
')',
$.actionValueStmt,
optional(seq(
'else',
$.actionValueStmt,
)),
),
if_moduleStmt: $ => seq(
'if',
'(',
$.condPredicate,
')',
$.moduleStmt,
optional(seq(
'else',
$.moduleStmt,
)),
),
if_expressionStmt: $ => seq(
'if',
'(',
$.condPredicate,
')',
$.expressionStmt,
optional(seq(
'else',
$.expressionStmt,
)),
),
case_functionBodyStmt: $ => choice(
seq(
'case',
'(',
$.expression,
')',
repeat($.caseItem_functionBodyStmt),
optional($.defaultItem_functionBodyStmt),
'endcase',
),
seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.casePatItem_functionBodyStmt),
optional($.defaultItem_functionBodyStmt),
'endcase',
),
),
case_actionStmt: $ => choice(
seq(
'case',
'(',
$.expression,
')',
repeat($.caseItem_actionStmt),
optional($.defaultItem_actionStmt),
'endcase',
),
seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.casePatItem_actionStmt),
optional($.defaultItem_actionStmt),
'endcase',
),
),
case_actionValueStmt: $ => choice(
seq(
'case',
'(',
$.expression,
')',
repeat($.caseItem_actionValueStmt),
optional($.defaultItem_actionValueStmt),
'endcase',
),
seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.casePatItem_actionValueStmt),
optional($.defaultItem_actionValueStmt),
'endcase',
),
),
case_moduleStmt: $ => choice(
seq(
'case',
'(',
$.expression,
')',
repeat($.caseItem_moduleStmt),
optional($.defaultItem_moduleStmt),
'endcase',
),
seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.casePatItem_moduleStmt),
optional($.defaultItem_moduleStmt),
'endcase',
),
),
case_expressionStmt: $ => choice(
seq(
'case',
'(',
$.expression,
')',
repeat($.caseItem_expressionStmt),
optional($.defaultItem_expressionStmt),
'endcase',
),
seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.casePatItem_expressionStmt),
optional($.defaultItem_expressionStmt),
'endcase',
),
),
caseItem_functionBodyStmt: $ => seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
':',
$.functionBodyStmt,
),
caseItem_actionStmt: $ => seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
':',
$.actionStmt,
),
caseItem_actionValueStmt: $ => seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
':',
$.actionValueStmt,
),
caseItem_moduleStmt: $ => seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
':',
$.moduleStmt,
),
caseItem_expressionStmt: $ => seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
':',
$.expressionStmt,
),
defaultItem_functionBodyStmt: $ => seq(
'default',
optional(':'),
$.functionBodyStmt,
),
defaultItem_actionStmt: $ => seq(
'default',
optional(':'),
$.actionStmt,
),
defaultItem_actionValueStmt: $ => seq(
'default',
optional(':'),
$.actionValueStmt,
),
defaultItem_moduleStmt: $ => seq(
'default',
optional(':'),
$.moduleStmt,
),
defaultItem_expressionStmt: $ => seq(
'default',
optional(':'),
$.expressionStmt,
),
while_functionBodyStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.functionBodyStmt,
),
while_actionStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.actionStmt,
),
while_actionValueStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.actionValueStmt,
),
while_moduleStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.moduleStmt,
),
while_expressionStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.expressionStmt,
),
for_functionBodyStmt: $ => seq(
'for',
'(',
$.forInit,
';',
$.forTest,
';',
$.forIncr,
')',
$.functionBodyStmt,
),
for_actionStmt: $ => seq(
'for',
'(',
$.forInit,
';',
$.forTest,
';',
$.forIncr,
')',
$.actionStmt,
),
for_actionValueStmt: $ => seq(
'for',
'(',
$.forInit,
';',
$.forTest,
';',
$.forIncr,
')',
$.actionValueStmt,
),
for_moduleStmt: $ => seq(
'for',
'(',
$.forInit,
';',
$.forTest,
';',
$.forIncr,
')',
$.moduleStmt,
),
for_expressionStmt: $ => seq(
'for',
'(',
$.forInit,
';',
$.forTest,
';',
$.forIncr,
')',
$.expressionStmt,
),
forInit: $ => choice(
$.forOldInit,
$.forNewInit,
),
forOldInit: $ => seq(
$.simpleVarAssign,
repeat(seq(
',',
$.simpleVarAssign,
)),
),
simpleVarAssign: $ => seq(
$.identifier,
'=',
$.identifier,
),
forNewInit: $ => seq(
optional($.type),
$.identifier,
'=',
$.expression,
repeat(seq(
',',
$.simpleVarDeclAssign,
)),
),
simpleVarDeclAssign: $ => seq(
optional($.type),
$.identifier,
'=',
$.expression,
),
forTest: $ => $.expression,
forIncr: $ => seq(
$.varIncr,
repeat(seq(
',',
$.varIncr,
)),
),
varIncr: $ => seq(
$.identifier,
'=',
$.expression,
),
functionDef: $ => choice(
seq(
optional($.attributeInstances),
$.functionProto,
$.functionBody,
'endfunction',
optional(seq(
':',
$.identifier,
)),
),
seq(
'function',
optional($.type),
$.identifier,
'(',
optional($.functionFormals),
')',
optional($.provisos),
'=',
$.expression,
';',
),
),
functionProto: $ => seq(
'function',
optional($.type),
$.identifier,
optional(seq(
'(',
optional($.functionFormals),
')',
)),
optional($.provisos),
';',
),
functionFormals: $ => seq(
$.functionFormal,
repeat(seq(
',',
$.functionFormal,
)),
),
functionFormal: $ => seq(
optional($.type),
$.identifier,
optional(seq(
'(',
optional($.functionFormals),
')',
)),
),
functionBody: $ => choice(
$.actionBlock,
$.actionValueBlock,
repeat($.functionBodyStmt),
),
functionBodyStmt: $ => choice(
$.returnStmt,
$.varDecl,
$.varAssign,
$.functionDef,
$.moduleDef,
$.beginEndStmt_functionBodyStmt,
$.if_functionBodyStmt,
$.case_functionBodyStmt,
$.for_functionBodyStmt,
$.while_functionBodyStmt,
),
returnStmt: $ => seq(
'return',
$.expression,
';',
),
expression: $ => choice(
seq(
$.expression,
repeat(seq(
'&&&',
choice(
$.expression,
seq(
$.expression,
'matches',
$.pattern,
),
),
)),
'?',
$.expression,
':',
$.expression,
),
seq(
$.expression,
'matches',
$.pattern,
repeat(seq(
'&&&',
choice(
$.expression,
seq(
$.expression,
'matches',
$.pattern,
),
),
)),
'?',
$.expression,
':',
$.expression,
),
seq(
$.unop,
$.expression,
),
seq(
$.expression,
$.binop,
$.expression,
),
$.exprPrimary,
),
exprPrimary: $ => choice(
seq(
'valueof',
'(',
$.type,
')',
),
seq(
'valueOf',
'(',
$.type,
')',
),
$.identifier,
$.IntLiteral,
$.RealLiteral,
$.stringLiteral,
$.systemFunctionCall,
seq(
'(',
$.expression,
')',
),
'?',
$.bitConcat,
seq(
$.exprPrimary,
'[',
$.expression,
optional(seq(
':',
$.expression,
)),
']',
),
$.beginEndExpr,
$.actionBlock,
$.actionValueBlock,
seq(
$.exprPrimary,
seq(
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
),
),
seq(
$.exprPrimary,
'.',
$.identifier,
seq(
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
),
),
$.typeAssertion,
$.structExpr,
$.case_functionBodyStmt,
seq(
$.exprPrimary,
'.',
$.identifier,
),
$.taggedUnionExpr,
$.interfaceExpr,
$.ruleExpr,
$.seqFsmStmt,
$.parFsmStmt,
$.moduleApp,
$.taggedUnionPattern,
'?',
),
condExpr: $ => seq(
$.condPredicate,
'?',
$.expression,
':',
$.expression,
),
condPredicate: $ => seq(
choice(
$.expression,
seq(
$.expression,
'matches',
$.pattern,
),
),
repeat(seq(
'&&&',
choice(
$.expression,
seq(
$.expression,
'matches',
$.pattern,
),
),
)),
),
exprOrCondPattern: $ => choice(
$.expression,
seq(
$.expression,
'matches',
$.pattern,
),
),
operatorExpr: $ => choice(
seq(
$.unop,
$.expression,
),
seq(
$.expression,
$.binop,
$.expression,
),
),
unop: $ => choice(
'+',
'-',
'!',
'~',
'&',
'~&',
'|',
'~|',
'^',
'^~',
'~^',
),
binop: $ => choice(
'*',
'**',
'/',
'%',
'+',
'-',
'<<',
'>>',
'<=',
'>=',
'<',
'>',
'==',
'!=',
'&',
'^',
'~^',
'^~',
'|',
'&&',
'&&',
'||',
),
bitConcat: $ => seq(
'{',
$.expression,
repeat(seq(
',',
$.expression,
)),
'}',
),
beginEndExpr: $ => seq(
'begin',
optional(seq(
':',
$.identifier,
)),
repeat($.expressionStmt),
$.expression,
'end',
optional(seq(
':',
$.identifier,
)),
),
actionBlock: $ => seq(
'action',
optional(seq(
':',
$.identifier,
)),
repeat($.actionStmt),
'endaction',
optional(seq(
':',
$.identifier,
)),
),
actionStmt: $ => choice(
$.regWrite,
$.varDo,
$.varDeclDo,
seq(
$.functionCall,
';',
),
$.systemTaskStmt,
seq(
optional($.expression),
';',
),
$.actionBlock,
$.varDecl,
$.varAssign,
$.functionDef,
$.moduleDef,
$.beginEndStmt_actionStmt,
$.if_actionStmt,
$.case_actionStmt,
$.for_actionStmt,
$.while_actionStmt,
),
actionValueBlock: $ => seq(
'actionvalue',
optional(seq(
':',
$.identifier,
)),
repeat($.actionValueStmt),
'endactionvalue',
optional(seq(
':',
$.identifier,
)),
),
actionValueStmt: $ => choice(
$.regWrite,
$.varDo,
$.varDeclDo,
seq(
$.functionCall,
';',
),
$.systemTaskStmt,
$.actionValueBlock,
seq(
optional($.expression),
';',
),
$.returnStmt,
$.varDecl,
$.varAssign,
$.functionDef,
$.moduleDef,
$.beginEndStmt_actionValueStmt,
$.if_actionValueStmt,
$.case_actionValueStmt,
$.for_actionValueStmt,
$.while_actionValueStmt,
),
varDeclDo: $ => seq(
optional($.attributeInstances),
$.type,
$.identifier,
'<-',
$.expression,
';',
),
varDo: $ => seq(
optional($.attributeInstances),
$.identifier,
'<-',
$.expression,
';',
),
functionCall: $ => seq(
$.exprPrimary,
optional(seq(
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
)),
),
methodCall: $ => seq(
$.exprPrimary,
'.',
$.identifier,
optional(seq(
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
)),
),
typeAssertion: $ => choice(
seq(
$.type,
'\'',
$.bitConcat,
),
seq(
$.type,
'\'',
'(',
$.expression,
')',
),
),
structExpr: $ => seq(
$.identifier_type,
'{',
optional(seq(
$.memberBind,
repeat(seq(
',',
$.memberBind,
)),
)),
'}',
),
memberBind: $ => seq(
$.identifier,
':',
$.expression,
),
taggedUnionExpr: $ => choice(
seq(
'tagged',
$.identifier_type,
'{',
$.memberBind,
seq(
',',
$.memberBind,
),
'}',
),
seq(
'tagged',
$.identifier_type,
$.exprPrimary,
),
),
interfaceExpr: $ => seq(
'interface',
$.type,
optional(';'),
repeat($.interfaceStmt),
'endinterface',
optional(seq(
':',
$.identifier_type,
)),
),
ruleExpr: $ => seq(
optional($.attributeInstances),
'rules',
optional(seq(
':',
$.identifier,
)),
repeat($.ruleStmt),
'endrules',
optional(seq(
':',
$.identifier,
)),
),
ruleStmt: $ => choice(
$.r_rule,
$.expressionStmt,
),
pattern: $ => choice(
seq(
'.',
$.identifier,
),
'.*',
$.constantPattern,
$.taggedUnionPattern,
$.structPattern,
$.tuplePattern,
seq(
'(',
$.pattern,
')',
),
),
constantPattern: $ => choice(
$.IntLiteral,
$.RealLiteral,
$.stringLiteral,
$.identifier_type,
),
taggedUnionPattern: $ => seq(
'tagged',
$.identifier_type,
optional($.pattern),
),
structPattern: $ => seq(
'tagged',
$.identifier_type,
'{',
$.identifier,
':',
$.pattern,
repeat(seq(
',',
$.identifier,
':',
$.pattern,
)),
'}',
),
tuplePattern: $ => seq(
'{',
$.pattern,
repeat(seq(
',',
$.pattern,
)),
'}',
),
casePatItem_functionBodyStmt: $ => seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.functionBodyStmt,
),
casePatItem_actionStmt: $ => seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.actionStmt,
),
casePatItem_actionValueStmt: $ => seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.actionValueStmt,
),
casePatItem_moduleStmt: $ => seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.moduleStmt,
),
casePatItem_expressionStmt: $ => seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.expressionStmt,
),
caseExpr: $ => seq(
'case',
'(',
$.expression,
')',
'matches',
repeat($.caseExprItem),
'endcase',
),
caseExprItem: $ => choice(
seq(
$.pattern,
optional(seq(
'&&&',
$.expression,
)),
':',
$.expression,
),
seq(
'default',
optional(':'),
$.expression,
),
),
systemTaskStmt: $ => choice(
seq(
$.systemTaskCall,
';',
),
seq(
$.displayTaskName,
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
';',
),
seq(
$.stringTaskName,
'(',
$.identifier,
optional(seq(
',',
$.expression,
optional(seq(
',',
$.expression,
)),
)),
')',
';',
),
seq(
'$ungetc',
'(',
$.expression,
',',
$.identifier,
')',
';',
),
seq(
'$fflush',
'(',
optional($.identifier),
')',
';',
),
seq(
'$finish',
optional(seq(
'(',
$.expression,
')',
)),
';',
),
seq(
'$stop',
optional(seq(
'(',
$.expression,
')',
)),
),
seq(
'$dumpvars',
';',
),
seq(
'$dumpon',
';',
),
seq(
'$dumpoff',
';',
),
),
displayTaskName: $ => choice(
'$display',
'$displayb',
'$displayo',
'$displayh',
'$write',
'$writeb',
'$writeo',
'$writeh',
),
stringTaskName: $ => choice(
'$swrite',
'$swriteb',
'$swriteo',
'$swriteh',
'$sformat',
),
systemFunctionCall: $ => choice(
'$time',
'$stime',
$.systemTaskCall,
),
systemTaskCall: $ => choice(
seq(
'$realtobits',
'(',
$.expression,
')',
),
seq(
'$bitstoreal',
'(',
$.expression,
')',
),
seq(
'$test$plusargs',
'(',
$.expression,
')',
),
seq(
'$format',
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
),
seq(
'$fopen',
'(',
$.expression,
optional(seq(
',',
$.expression,
)),
')',
),
seq(
$.stringAVTaskName,
'(',
optional(seq(
$.expression,
repeat(seq(
',',
$.expression,
)),
)),
')',
),
seq(
'fgetc',
'(',
$.identifier,
')',
),
),
stringAVTaskName: $ => choice(
'$swriteAV',
'$swritebAV',
'$swriteoAV',
'$swritehAV',
'$sformatAV',
),
attributeInstances: $ => seq(
$.attributeInstance,
repeat($.attributeInstance),
),
attributeInstance: $ => seq(
'(*',
$.attrSpec,
repeat(seq(
',',
$.attrSpec,
)),
'*)',
),
attrSpec: $ => seq(
$.attrName,
optional(seq(
'=',
$.expression,
)),
),
attrName: $ => choice(
$.identifier,
$.identifier_type,
),
provisos: $ => seq(
'provisos',
'(',
$.proviso,
repeat(seq(
',',
$.proviso,
)),
')',
),
proviso: $ => seq(
$.identifier_type,
'#',
'(',
$.type,
repeat(seq(
',',
$.type,
)),
')',
),
typeclassDef: $ => seq(
'typeclass',
$.typeclassIde,
$.typeFormals,
optional($.provisos),
optional($.typedepends),
';',
repeat($.overloadedDef),
'endtypeclass',
optional(seq(
':',
$.identifier_type,
)),
),
typeclassIde: $ => $.identifier_type,
typelist: $ => choice(
$.typeIde,
seq(
'(',
$.typeIde,
repeat(seq(
',',
$.typeIde,
)),
')',
),
),
typedepends: $ => seq(
'dependencies',
'(',
$.typedepend,
repeat(seq(
',',
$.typedepend,
)),
')',
),
typedepend: $ => seq(
$.typelist,
'determines',
$.typelist,
),
overloadedDef: $ => choice(
$.functionProto,
$.varDecl,
$.moduleProto,
$.moduleDef,
$.functionDef,
),
typeclassInstanceDef: $ => seq(
'instance',
$.typeclassIde,
'#',
'(',
$.type,
repeat(seq(
',',
$.type,
)),
')',
optional($.provisos),
';',
repeat(choice(
$.varAssign,
$.functionDef,
$.moduleDef,
)),
'endinstance',
optional(seq(
':',
$.typeclassIde,
)),
),
derives: $ => seq(
'deriving',
'(',
$.typeclassIde,
repeat(seq(
',',
$.typeclassIde,
)),
')',
),
externModuleImport: $ => seq(
'import',
'"BVI"',
optional(seq(
$.identifier,
'=',
)),
$.moduleProto,
repeat($.moduleStmt),
repeat($.importBVIStmt),
'endmodule',
optional(seq(
':',
$.identifier,
)),
),
importBVIStmt: $ => choice(
$.parameterBVIStmt,
$.methodBVIStmt,
$.portBVIStmt,
$.inputClockBVIStmt,
$.defaultClockBVIStmt,
$.outputClockBVIStmt,
$.inputResetBVIStmt,
$.defaultResetBVIStmt,
$.noResetBVIStmt,
$.outputResetBVIStmt,
$.ancestorBVIStmt,
$.sameFamilyBVIStmt,
$.scheduleBVIStmt,
$.pathBVIStmt,
$.interfaceBVIStmt,
$.inoutBVIStmt,
),
enabled_sel: $ => seq(
'enable',
'(',
$.portId,
')',
),
ready_sel: $ => seq(
'ready',
'(',
$.portId,
')',
),
clocked_by_sel: $ => seq(
'clocked_by',
'(',
$.clockId,
')',
),
reset_by_sel: $ => seq(
'reset_by',
'(',
$.resetId,
')',
),
parameterBVIStmt: $ => seq(
'parameter',
$.identifier,
'=',
$.expression,
';',
),
methodBVIStmt: $ => seq(
'method',
optional($.portId),
$.identifier,
optional(seq(
'(',
optional(seq(
$.portId,
repeat(seq(
',',
$.portId,
)),
)),
')',
)),
repeat(choice(
$.enabled_sel,
$.ready_sel,
$.clocked_by_sel,
$.reset_by_sel,
)),
';',
),
portBVIStmt: $ => seq(
'port',
$.identifier,
repeat(choice(
$.clocked_by_sel,
$.reset_by_sel,
)),
'=',
$.expression,
';',
),
inputClockBVIStmt: $ => seq(
'input_clock',
optional($.identifier),
'(',
optional($.portsDef),
')',
'=',
$.expression,
';',
),
portsDef: $ => seq(
$.portId,
optional(seq(
',',
optional($.attributeInstances),
$.portId,
)),
),
portId: $ => seq(
optional($.attributeInstance),
$.identifier,
),
defaultClockBVIStmt: $ => seq(
'default_clock',
optional($.identifier),
optional(seq(
'(',
optional($.portsDef),
')',
)),
optional(seq(
'=',
$.expression,
)),
';',
),
outputClockBVIStmt: $ => seq(
'output_clock',
$.identifier,
'(',
optional($.portsDef),
')',
';',
),
inputResetBVIStmt: $ => seq(
'input_reset',
optional($.identifier),
optional(seq(
'(',
optional($.portId),
')',
)),
optional($.clocked_by_sel),
'=',
$.expression,
';',
),
clockId: $ => $.identifier,
defaultResetBVIStmt: $ => choice(
seq(
'default_reset',
$.identifier,
';',
),
seq(
'default_reset',
optional($.identifier),
optional(seq(
'(',
optional($.portId),
')',
)),
optional($.clocked_by_sel),
optional(seq(
'=',
$.expression,
)),
';',
),
),
outputResetBVIStmt: $ => seq(
'output_reset',
$.identifier,
optional(seq(
'(',
optional($.portId),
')',
)),
optional($.clocked_by_sel),
';',
),
ancestorBVIStmt: $ => seq(
'ancestor',
'(',
$.clockId,
',',
$.clockId,
')',
';',
),
sameFamilyBVIStmt: $ => seq(
'same_family',
'(',
$.clockId,
',',
$.clockId,
')',
';',
),
scheduleBVIStmt: $ => seq(
'schedule',
choice(
seq(
'(',
$.identifier,
repeat(seq(
',',
$.identifier,
)),
')',
),
$.identifier,
),
$.operatorId,
choice(
seq(
'(',
$.identifier,
repeat(seq(
',',
$.identifier,
)),
')',
),
$.identifier,
),
';',
),
operatorId: $ => choice(
'CF',
'SB',
'SBR',
'C',
),
pathBVIStmt: $ => seq(
'path',
'(',
$.portId,
',',
$.portId,
')',
';',
),
interfaceBVIStmt: $ => seq(
'interface',
$.typeDefType,
optional($.typeIde),
';',
repeat($.interfaceBVIMembDecl),
'endinterface',
optional(seq(
':',
$.typeIde,
)),
),
interfaceBVIMembDecl: $ => choice(
$.methodBVIStmt,
$.interfaceBVIStmt,
),
inoutBVIStmt: $ => choice(
seq(
'inout',
$.portId,
repeat(choice(
$.clocked_by_sel,
$.reset_by_sel,
)),
'=',
$.expression,
';',
),
seq(
'ifc_inout',
$.identifier,
'(',
$.portId,
')',
repeat(choice(
$.clocked_by_sel,
$.reset_by_sel,
)),
';',
),
),
resetId: $ => $.identifier,
noResetBVIStmt: $ => seq(
'no_reset',
';',
),
externCImport: $ => seq(
'import',
'"BDPI"',
optional(seq(
$.identifier,
'=',
)),
'function',
$.type,
$.identifier,
'(',
optional($.cFuncArgs),
')',
optional($.provisos),
';',
),
cFuncArgs: $ => seq(
$.cFuncArg,
repeat(seq(
',',
$.cFuncArg,
)),
),
cFuncArg: $ => seq(
$.type,
optional($.identifier),
),
fsmStmt: $ => choice(
$.exprFsmStmt,
$.seqFsmStmt,
$.parFsmStmt,
$.ifFsmStmt,
$.whileFsmStmt,
$.repeatFsmStmt,
$.forFsmStmt,
$.returnFsmStmt,
),
exprFsmStmt: $ => choice(
seq(
$.regWrite,
';',
),
seq(
$.expression,
';',
),
),
seqFsmStmt: $ => seq(
'seq',
$.fsmStmt,
repeat($.fsmStmt),
'endseq',
),
parFsmStmt: $ => seq(
'par',
$.fsmStmt,
repeat($.fsmStmt),
'endpar',
),
ifFsmStmt: $ => seq(
'if',
$.expression,
$.fsmStmt,
optional(seq(
'else',
$.fsmStmt,
)),
),
whileFsmStmt: $ => seq(
'while',
'(',
$.expression,
')',
$.loopBodyFsmStmt,
),
forFsmStmt: $ => seq(
'for',
'(',
$.fsmStmt,
';',
$.expression,
';',
$.fsmStmt,
')',
$.loopBodyFsmStmt,
),
returnFsmStmt: $ => seq(
'return',
';',
),
repeatFsmStmt: $ => seq(
'repeat',
'(',
$.expression,
')',
$.loopBodyFsmStmt,
),
loopBodyFsmStmt: $ => choice(
$.fsmStmt,
seq(
'break',
';',
),
seq(
'continue',
';',
),
),
BlockComment: $ => "a", // fixme
LineComment: $ => "a", // fixme
Whitespace: $ => "a", // fixme
Newline: $ => "a", // fixme
CharacterConstant: $ => "a", // fixme
CCharSequence: $ => "a", // fixme
CChar: $ => "a", // fixme
NoneWhitespace: $ => "a", // fixme
EscapeSequence: $ => "a", // fixme
SimpleEscapeSequence: $ => "a", // fixme
OctalEscapeSequence: $ => "a", // fixme
HexadecimalEscapeSequence: $ => "a", // fixme
StringLiteral: $ => "a", // fixme
SChar: $ => "a", // fixme
HexadecimalDigit: $ => "a", // fixme
OctalDigit: $ => "a", // fixme
SCharSequence: $ => "a", // fixme
Digit: $ => "a", // fixme
Identifier: $ => "a", // fixme
FileName: $ => "a", // fixme
IdentifierNondigit: $ => "a", // fixme
Nondigit: $ => "a", // fixme
IntLiteral: $ => "a", // fixme
SizedIntLiteral: $ => "a", // fixme
UnsizedIntLiteral: $ => "a", // fixme
BaseLiteral: $ => "a", // fixme
DecNum: $ => "a", // fixme
BitWidth: $ => "a", // fixme
Sign: $ => "a", // fixme
DecDigits: $ => "a", // fixme
DecDigitsUnderscore: $ => "a", // fixme
HexDigitsUnderscore: $ => "a", // fixme
OctDigitsUnderscore: $ => "a", // fixme
BinDigitsUnderscore: $ => "a", // fixme
RealLiteral: $ => "a", // fixme
Exp: $ => "a", // fixme
CompilerDirective: $ => "a", // fixme
LineNumber: $ => "a", // fixme
Level: $ => "a", // fixme
MacroName: $ => "a", // fixme
MacroFormals: $ => "a", // fixme
MacroInvocation_: $ => "a", // fixme
MacroInvocation: $ => "a", // fixme
MacroActuals: $ => "a", // fixme
SubstText: $ => "a", // fixme
}
